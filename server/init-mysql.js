const mysql = require('mysql2/promise');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL
const dbConfig = {
    host: process.env.DB_HOST || 'localhost',
    port: process.env.DB_PORT || 3306,
    user: process.env.DB_USER || 'root',
    password: process.env.DB_PASSWORD || '',
    multipleStatements: true
};

const DB_NAME = 'coffeeshop_db';
const SCHEMA_FILE = path.join(__dirname, 'schema-mysql.sql');

async function initializeDatabase() {
    console.log('üóÑÔ∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MySQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ñ–µ–π–Ω–∏...');
    console.log(`üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${dbConfig.user}@${dbConfig.host}:${dbConfig.port}`);
    
    let connection;
    
    try {
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL —Å–µ—Ä–≤–µ—Ä—É
        connection = await mysql.createConnection(dbConfig);
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const [databases] = await connection.execute(`SHOW DATABASES LIKE '${DB_NAME}'`);
        if (databases.length > 0) {
            console.log(`üóëÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ${DB_NAME} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞`);
        }
        
        // –ß—Ç–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ö–µ–º—ã
        if (!fs.existsSync(SCHEMA_FILE)) {
            throw new Error(`–§–∞–π–ª —Å—Ö–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: ${SCHEMA_FILE}`);
        }
        
        const schema = fs.readFileSync(SCHEMA_FILE, 'utf8');
        console.log('üìã –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL —Å—Ö–µ–º—ã...');
        
        await connection.query(schema);
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã');
        
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await connection.execute(`USE ${DB_NAME}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        const [tables] = await connection.execute('SHOW TABLES');
        console.log('üìä –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:', tables.map(t => Object.values(t)[0]).join(', '));
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        const [categoriesCount] = await connection.execute('SELECT COUNT(*) as count FROM categories');
        const [productsCount] = await connection.execute('SELECT COUNT(*) as count FROM products');
        const [ordersCount] = await connection.execute('SELECT COUNT(*) as count FROM orders');
        const [orderItemsCount] = await connection.execute('SELECT COUNT(*) as count FROM order_items');
        
        console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:');
        console.log(`   üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoriesCount[0].count}`);
        console.log(`   üõçÔ∏è  –¢–æ–≤–∞—Ä–æ–≤: ${productsCount[0].count}`);
        console.log(`   üìã –ó–∞–∫–∞–∑–æ–≤: ${ordersCount[0].count}`);
        console.log(`   üì¶ –ü–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–æ–≤: ${orderItemsCount[0].count}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π
        const [views] = await connection.execute("SHOW FULL TABLES WHERE table_type = 'VIEW'");
        console.log(`   üëÅÔ∏è  –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π: ${views.length}`);
        
        console.log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
        printConnectionInfo();
        
    } catch (error) {
        console.error('\n‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error.message);
        
        if (error.code === 'ECONNREFUSED') {
            console.error('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
            console.error('   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ MySQL —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
            console.error('   2. –î–ª—è macOS: brew services start mysql');
            console.error('   3. –î–ª—è Linux: sudo systemctl start mysql');
            console.error('   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
        } else if (error.code === 'ER_ACCESS_DENIED_ERROR') {
            console.error('\nüí° –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º:');
            console.error('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å');
            console.error('   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ CREATE DATABASE');
        }
        
        throw error;
    } finally {
        if (connection) {
            await connection.end();
        }
    }
}

async function testConnection() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL...');
    
    try {
        const connection = await mysql.createConnection(dbConfig);
        const [result] = await connection.execute('SELECT VERSION() as version, NOW() as time');
        
        console.log('‚úÖ MySQL —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        console.log(`   üìå –í–µ—Ä—Å–∏—è: ${result[0].version}`);
        console.log(`   üïí –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${result[0].time}`);
        
        await connection.end();
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
        return false;
    }
}

async function showDatabaseInfo() {
    try {
        const connection = await mysql.createConnection({...dbConfig, database: DB_NAME});
        
        console.log(`\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ${DB_NAME}:`);
        
        // –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        const [tables] = await connection.execute('SHOW TABLES');
        console.log(`\nüìã –¢–∞–±–ª–∏—Ü—ã (${tables.length}):`);
        tables.forEach(table => {
            console.log(`   ‚Ä¢ ${Object.values(table)[0]}`);
        });
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        const stats = await Promise.all([
            connection.execute('SELECT COUNT(*) as count FROM categories'),
            connection.execute('SELECT COUNT(*) as count FROM products WHERE available = TRUE'),
            connection.execute('SELECT COUNT(*) as count FROM products WHERE featured = TRUE'),
            connection.execute('SELECT COUNT(*) as count FROM orders'),
            connection.execute('SELECT COUNT(*) as count FROM order_items')
        ]);
        
        console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
        console.log(`   üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${stats[0][0][0].count}`);
        console.log(`   üõçÔ∏è  –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${stats[1][0][0].count}`);
        console.log(`   ‚≠ê –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${stats[2][0][0].count}`);
        console.log(`   üìã –ó–∞–∫–∞–∑–æ–≤: ${stats[3][0][0].count}`);
        console.log(`   üì¶ –ü–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–æ–≤: ${stats[4][0][0].count}`);
        
        // –¢–æ–ø —Ç–æ–≤–∞—Ä—ã
        const [topProducts] = await connection.execute(`
            SELECT p.name, SUM(oi.quantity) as total_ordered
            FROM products p
            JOIN order_items oi ON p.id = oi.product_id
            GROUP BY p.id, p.name
            ORDER BY total_ordered DESC
            LIMIT 5
        `);
        
        if (topProducts.length > 0) {
            console.log('\nüèÜ –¢–æ–ø —Ç–æ–≤–∞—Ä—ã:');
            topProducts.forEach((product, index) => {
                console.log(`   ${index + 1}. ${product.name} (${product.total_ordered} –∑–∞–∫–∞–∑–æ–≤)`);
            });
        }
        
        await connection.end();
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error.message);
    }
}

function printConnectionInfo() {
    console.log('\n' + '='.repeat(60));
    console.log('üîó –ò–ù–§–û–†–ú–ê–¶–ò–Ø –î–õ–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø');
    console.log('='.repeat(60));
    console.log(`üì° Host: ${dbConfig.host}:${dbConfig.port}`);
    console.log(`üóÑÔ∏è  Database: ${DB_NAME}`);
    console.log(`üë§ User: ${dbConfig.user}`);
    console.log('\nüì± –î–ª—è iOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:');
    console.log(`   baseURL: "http://${dbConfig.host}:3000/api"`);
    console.log('\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('   1. npm start - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä API');
    console.log('   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å endpoints —á–µ—Ä–µ–∑ Postman/curl');
    console.log('   3. –ü–æ–¥–∫–ª—é—á–∏—Ç—å iOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
    console.log('='.repeat(60));
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    const args = process.argv.slice(2);
    
    try {
        if (args.includes('--test')) {
            const success = await testConnection();
            process.exit(success ? 0 : 1);
        } else if (args.includes('--info')) {
            await showDatabaseInfo();
        } else {
            await initializeDatabase();
        }
    } catch (error) {
        console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    main();
}

module.exports = {
    initializeDatabase,
    testConnection,
    showDatabaseInfo
}; 